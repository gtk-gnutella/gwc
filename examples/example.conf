# Below are the settings for crab.
# Note that names are case-insensitive, but values are case-sensitive.
# All pathnames must be absolute. A leading tilde followed by a slash
# is translated to the home directory of the current user. A tilde followed
# by a username is translated to the home directory of that user.
# The values can escaped using backslashes and double-quotes to include
# e.g., whitespace if desired. Escaping NUL bytes or line-breaks is not
# supported.

# The "Location" option is the most important option. This is the URL which
# will be served by Crab.
Location		http://gwc.example.com:8080/gwc/

# These are the paths of the files in which Crab stores persistent data. All
# of them must be set and point to accessible files.
peer_cache		~gwc/db/peer_cache
bad_url_cache		~gwc/db/urls.bad
good_url_cache		~gwc/db/urls.good

# Log files
log_access		~gwc/logs/access.log
log_checks		~gwc/logs/checks.log
log_dns			~gwc/logs/dns.log
log_main		~gwc/logs/main.log

# User and group to run Crab as (requires super-user privileges)
#User			gwc

# If not set, group of user plus all his group privileges
#Group			gwc

#chroot_directory	/var/chroot/gwc # Requires super-user privileges

# Templates
#data_key		some_string
#data_template		/path/to/data_template
#base_template		/path/to/base_template

# If coredump_directory is not set, the resource limit for coredumps will
# be reduced to zero. Use for debugging only as coredumps might contain
# sensitive information.

Coredump_Directory	~gwc/cores

# If true, gwc calls pause() instead of abort() when receiving a fatal signal
# so you can attach with a debugger and inspect the process.
#pause_on_crash		false

# Run as daemon, deactivate this if you want to run a watcher daemon such as
# "respawn" to automagically respawn gwc (if it crashes).
#daemonize		true

# When, for example, profiling with gprof the profiler code needs write-access
# to the working directory. For such special purposes it's useful to use
# something other than the root directory.
#working_directory	"/"

# If "listen_port" is not set, it's extracted from "location". This option is
# only necessary when using port forwarding and the external TCP port is not
# the same as the internal TCP port.
#listen_port		8080

# The default value is "0.0.0.0". If you want to use Crab in a local network
# you could use e.g., 10.0.0.1 or whatever is appropriate for your address
# range. If you have a static IP address you might want to use it here. See
# also bind(2).
#listen_address		0.0.0.0

# The same as listen_address but for an (additional) IPv6 TCP socket.
#listen_address6	"::"

#listen_backlog		32	# backlog argument for listen(2)

# The value of "address_filter" must be the pathname of a file containing a
# list of IPv4 address ranges to block. Crab will not connect to an address
# with matches a listed range and will close incoming connections from such
# immediately.
#
# The format is:
#	<address>[<CIDR mask>|<IPv4 mask>]
# Examples:
# 	127.0.0.1
# 	192.0.2.0/24
# 	192.0.2.0/255.255.255.0
#
#address_filter		/path/to/file

# If true, requests from peers by filtered addresses are parsed before
# disconnecting them so that it can be logged to log_access.
#late_filter		false

# Fine tuning (values show the defaults)
#max_cached_peers	10000	# Max. amount of peer addresses to be stored
#hostfile_lines		20	# Number peers returned for "hostfile" requests
#urlfile_lines		10	# Number URLs returned for "urlfile" requests
#peers_per_get		16	# Number of peers returned for "get" requests
#gwcs_per_get		4	# Number of URLs returned for "get" requests
#max_connect_time	15	# Seconds a connection is allowed to persist
#idle_timeout		10	# Seconds after which an idle conn. is closed
#max_accepts_per_sec	10	# max. number of accept() calls per second
#url_check_delay	30	# Seconds to wait between URL checks
#gwc_lock_time		600	# Seconds; lock time per host

# If true, the GWC v2.0 "get" request is understood. This is seldom necessary
# since all clients send backwards compatible requests and "get" replies create
# almost the double amount of traffic. If using "network_id", it is
# recommended - albeit not strictly necessary - to enably this option as well.
#
#support_v2		false

# UHC support refers to UDP Host Cache support which means that peers can
# acquire addresses through UDP. Also if a cached peer address expires, Crab
# will send a UDP Gnutella Ping to check whether its still alive and extend
# the lease if it replies.

#support_uhc		false

# The UDP port to listen on. Ports below 1024 are not acceptable due to
# security reasons.
#uhc_port		<no default>

# UHCs should be known by a fully-qualified domain name rather than an
# IP address.
#uhc_hostname		uhc.example.com
#uhc_bind_address	"0.0.0.0"
#uhc_bind6_address	"::"

#uhc_peers_per_pong	50	# Replies should not exceed ~500 bytes
#uhc_pongs_per_sec	20	# Global PONG throttle (NOT per host)
#uhc_pong_timeout_msec  60000	# 1 minute; time to reply to a PING
#uhc_lock_time		600	# 10 minutes; lock time per host

#allow_anonymous	false	# Set to true to allow requests missing "client"

# If auto_discovery is enabled, submitted URLs are automagically verified and
# added to set of good URLs if they pass the check. Otherwise, only known URLs
# are checked and newly submitted URLs are added to the set of bad URLs with
# a check counter of 32. You might want to check these everyonce in a while
# and add them to the list of good URLs if they turn out to be valid.
#
#auto_discovery		false

# If url_check_strict is enabled, GWebCaches that return many URLs which have
# been failing for quite awhile are considered bad. It's enabled by default
# but it's too strict if there are many GWebCaches in a bad shape.
#url_check_strict	true

# Most GWebCaches do not properly canonicalize URLs and therefore report
# actually duplicate URLs. If there are too many of those GWebCaches it's
# recommended to enable "url_allow_allow_dupes" until most of the GWebCaches
# are fixed.
#url_check_allow_dupes	false

#http_dump_headers	false	# Include HTTP headers in the log
#send_x_remote_ip	false	# Send X-Remote-IP header
#send_from_header	false	# Send From: header when verifying GWC URLs
#contact_address	"me at example dot com" # Send with "From:"

# If true, the output of "uname -s" is added to the User-Agent and Server
# HTTP headers (useful for pissing contests)
#
#expose_sysname		false

# Low-level options
#tcp_rcvbuf_size	1024	# See setsockopt(2) for SO_RCVBUF
#tcp_sndbuf_size	4096	# See setsockopt(2) for SO_SNDBUF
#udp_rcvbuf_size	0	# Same as above but for the UDP socket (UHC)
#udp_sndbuf_size	0	# See above
#tcp_defer_accept_timeout 20	# See tcp(7) (Linux-only)

# Max. amount of bytes to receive when performing an urlcheck
#url_check_max_size	4096

# Max. amount of bytes to read when receiving a HTTP request. 512 bytes should
# be enough in almost all cases but some browsers send a lot of headers. This
# is a mild flood protection.
#
#request_max_size	1024

# The default is to deny any request for a certain network i.e., it's
# implicitly "gnutella". For example, Shareaza uses "gnutella2" for its
# network based on Mike's Protocol. It is not possible to serve more than one
# network. This setting is independent from "support_v2", the request parameter
# "net" is always handled. However, since other software cannot handle "net"
# without using GWC 2.0, it's recommended to enable "support_v2" as well.
#
#network_id		gnutella	# Alphanumeric network ID

